// Code generated by MockGen. DO NOT EDIT.
// Source: response_logic.go
//
// Generated by this command:
//
//	mockgen -package logic -source response_logic.go -destination mock_response_logic.go
//
// Package logic is a generated GoMock package.
package logic

import (
	http "net/http"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIResponseLogic is a mock of IResponseLogic interface.
type MockIResponseLogic struct {
	ctrl     *gomock.Controller
	recorder *MockIResponseLogicMockRecorder
}

// MockIResponseLogicMockRecorder is the mock recorder for MockIResponseLogic.
type MockIResponseLogicMockRecorder struct {
	mock *MockIResponseLogic
}

// NewMockIResponseLogic creates a new mock instance.
func NewMockIResponseLogic(ctrl *gomock.Controller) *MockIResponseLogic {
	mock := &MockIResponseLogic{ctrl: ctrl}
	mock.recorder = &MockIResponseLogicMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIResponseLogic) EXPECT() *MockIResponseLogicMockRecorder {
	return m.recorder
}

// CreateErrorResponse mocks base method.
func (m *MockIResponseLogic) CreateErrorResponse(err error) []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateErrorResponse", err)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// CreateErrorResponse indicates an expected call of CreateErrorResponse.
func (mr *MockIResponseLogicMockRecorder) CreateErrorResponse(err any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateErrorResponse", reflect.TypeOf((*MockIResponseLogic)(nil).CreateErrorResponse), err)
}

// CreateErrorStringResponse mocks base method.
func (m *MockIResponseLogic) CreateErrorStringResponse(errMessage string) []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateErrorStringResponse", errMessage)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// CreateErrorStringResponse indicates an expected call of CreateErrorStringResponse.
func (mr *MockIResponseLogicMockRecorder) CreateErrorStringResponse(errMessage any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateErrorStringResponse", reflect.TypeOf((*MockIResponseLogic)(nil).CreateErrorStringResponse), errMessage)
}

// SendNotBodyResponse mocks base method.
func (m *MockIResponseLogic) SendNotBodyResponse(w http.ResponseWriter) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendNotBodyResponse", w)
}

// SendNotBodyResponse indicates an expected call of SendNotBodyResponse.
func (mr *MockIResponseLogicMockRecorder) SendNotBodyResponse(w any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendNotBodyResponse", reflect.TypeOf((*MockIResponseLogic)(nil).SendNotBodyResponse), w)
}

// SendResponse mocks base method.
func (m *MockIResponseLogic) SendResponse(w http.ResponseWriter, response []byte, code int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendResponse", w, response, code)
}

// SendResponse indicates an expected call of SendResponse.
func (mr *MockIResponseLogicMockRecorder) SendResponse(w, response, code any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendResponse", reflect.TypeOf((*MockIResponseLogic)(nil).SendResponse), w, response, code)
}
