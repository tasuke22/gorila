// Code generated by MockGen. DO NOT EDIT.
// Source: todo_repository.go
//
// Generated by this command:
//
//	mockgen -package repositories -source todo_repository.go -destination mock_todo_repository.go
//
// Package repositories is a generated GoMock package.
package repositories

import (
	reflect "reflect"

	models "github.com/tasuke/go-mux-task/models"
	gomock "go.uber.org/mock/gomock"
)

// MockITodoRepository is a mock of ITodoRepository interface.
type MockITodoRepository struct {
	ctrl     *gomock.Controller
	recorder *MockITodoRepositoryMockRecorder
}

// MockITodoRepositoryMockRecorder is the mock recorder for MockITodoRepository.
type MockITodoRepositoryMockRecorder struct {
	mock *MockITodoRepository
}

// NewMockITodoRepository creates a new mock instance.
func NewMockITodoRepository(ctrl *gomock.Controller) *MockITodoRepository {
	mock := &MockITodoRepository{ctrl: ctrl}
	mock.recorder = &MockITodoRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITodoRepository) EXPECT() *MockITodoRepositoryMockRecorder {
	return m.recorder
}

// CreateTodo mocks base method.
func (m *MockITodoRepository) CreateTodo(todo *models.Todo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTodo", todo)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTodo indicates an expected call of CreateTodo.
func (mr *MockITodoRepositoryMockRecorder) CreateTodo(todo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTodo", reflect.TypeOf((*MockITodoRepository)(nil).CreateTodo), todo)
}

// DeleteTodo mocks base method.
func (m *MockITodoRepository) DeleteTodo(id, userId uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTodo", id, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTodo indicates an expected call of DeleteTodo.
func (mr *MockITodoRepositoryMockRecorder) DeleteTodo(id, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTodo", reflect.TypeOf((*MockITodoRepository)(nil).DeleteTodo), id, userId)
}

// GetAllTodos mocks base method.
func (m *MockITodoRepository) GetAllTodos(todos *[]models.Todo, userId uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTodos", todos, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetAllTodos indicates an expected call of GetAllTodos.
func (mr *MockITodoRepositoryMockRecorder) GetAllTodos(todos, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTodos", reflect.TypeOf((*MockITodoRepository)(nil).GetAllTodos), todos, userId)
}

// GetTodo mocks base method.
func (m *MockITodoRepository) GetTodo(todo *models.Todo, id, userId uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTodo", todo, id, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetTodo indicates an expected call of GetTodo.
func (mr *MockITodoRepositoryMockRecorder) GetTodo(todo, id, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTodo", reflect.TypeOf((*MockITodoRepository)(nil).GetTodo), todo, id, userId)
}

// GetTodoLast mocks base method.
func (m *MockITodoRepository) GetTodoLast(todo *models.Todo, userId uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTodoLast", todo, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetTodoLast indicates an expected call of GetTodoLast.
func (mr *MockITodoRepositoryMockRecorder) GetTodoLast(todo, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTodoLast", reflect.TypeOf((*MockITodoRepository)(nil).GetTodoLast), todo, userId)
}

// UpdateTodo mocks base method.
func (m *MockITodoRepository) UpdateTodo(todo *models.Todo, id string, userId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTodo", todo, id, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTodo indicates an expected call of UpdateTodo.
func (mr *MockITodoRepositoryMockRecorder) UpdateTodo(todo, id, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTodo", reflect.TypeOf((*MockITodoRepository)(nil).UpdateTodo), todo, id, userId)
}
