// Code generated by MockGen. DO NOT EDIT.
// Source: user_repository.go
//
// Generated by this command:
//
//	mockgen -package repositories -source user_repository.go -destination mock_user_repository.go
//
// Package repositories is a generated GoMock package.
package repositories

import (
	reflect "reflect"

	models "github.com/tasuke/go-mux-task/models"
	gomock "go.uber.org/mock/gomock"
)

// MockIUserRepository is a mock of IUserRepository interface.
type MockIUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIUserRepositoryMockRecorder
}

// MockIUserRepositoryMockRecorder is the mock recorder for MockIUserRepository.
type MockIUserRepositoryMockRecorder struct {
	mock *MockIUserRepository
}

// NewMockIUserRepository creates a new mock instance.
func NewMockIUserRepository(ctrl *gomock.Controller) *MockIUserRepository {
	mock := &MockIUserRepository{ctrl: ctrl}
	mock.recorder = &MockIUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserRepository) EXPECT() *MockIUserRepositoryMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockIUserRepository) CreateUser(user *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockIUserRepositoryMockRecorder) CreateUser(user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockIUserRepository)(nil).CreateUser), user)
}

// GetAllUserByEmail mocks base method.
func (m *MockIUserRepository) GetAllUserByEmail(user *[]models.User, email string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUserByEmail", user, email)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetAllUserByEmail indicates an expected call of GetAllUserByEmail.
func (mr *MockIUserRepositoryMockRecorder) GetAllUserByEmail(user, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUserByEmail", reflect.TypeOf((*MockIUserRepository)(nil).GetAllUserByEmail), user, email)
}

// GetUserByEmail mocks base method.
func (m *MockIUserRepository) GetUserByEmail(user *models.User, email string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", user, email)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockIUserRepositoryMockRecorder) GetUserByEmail(user, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockIUserRepository)(nil).GetUserByEmail), user, email)
}
